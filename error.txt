bpf: Failed to load program: Permission denied
; TRACEPOINT_PROBE(sock, inet_sock_set_state)
0: (bf) r6 = r1
; if (args->protocol != IPPROTO_TCP)
1: (71) r1 = *(u8 *)(r6 +30)
; if (args->protocol != IPPROTO_TCP)
2: (55) if r1 != 0x6 goto pc+226
 R1_w=inv6 R6_w=ctx(id=0,off=0,imm=0) R10=fp0
; u32 pid = bpf_get_current_pid_tgid() >> 32;
3: (85) call bpf_get_current_pid_tgid#14
4: (bf) r7 = r0
; struct sock *sk = (struct sock *)args->skaddr;
5: (79) r1 = *(u64 *)(r6 +8)
; struct sock *sk = (struct sock *)args->skaddr;
6: (7b) *(u64 *)(r10 -8) = r1
; u16 dport = args->dport;
7: (69) r1 = *(u16 *)(r6 +26)
; u16 lport = args->sport;
8: (7b) *(u64 *)(r10 -112) = r1
9: (69) r9 = *(u16 *)(r6 +24)
; tsp = bpf_map_lookup_elem((void *)bpf_pseudo_fd(1, -1), &sk);
10: (18) r1 = 0xffff9ce7b960b800
12: (bf) r2 = r10
; u32 pid = bpf_get_current_pid_tgid() >> 32;
13: (07) r2 += -8
; tsp = bpf_map_lookup_elem((void *)bpf_pseudo_fd(1, -1), &sk);
14: (85) call bpf_map_lookup_elem#1
15: (bf) r8 = r0
16: (b7) r0 = 0
; if (tsp == 0)
17: (15) if r8 == 0x0 goto pc+4
 R0_w=inv0 R6=ctx(id=0,off=0,imm=0) R7=inv(id=1) R8_w=map_value(id=0,off=0,ks=8,vs=8,imm=0) R9=inv(id=0,umax_value=65535,var_off=(0x0; 0xffff)) R10=fp0 fp-8=mmmmmmmm fp-112=inv
; delta_us = (bpf_ktime_get_ns() - *tsp) / 1000;
18: (85) call bpf_ktime_get_ns#5
; delta_us = (bpf_ktime_get_ns() - *tsp) / 1000;
19: (79) r1 = *(u64 *)(r8 +0)
 R0_w=inv(id=0) R6=ctx(id=0,off=0,imm=0) R7=inv(id=1) R8_w=map_value(id=0,off=0,ks=8,vs=8,imm=0) R9=inv(id=0,umax_value=65535,var_off=(0x0; 0xffff)) R10=fp0 fp-8=mmmmmmmm fp-112=inv
; delta_us = (bpf_ktime_get_ns() - *tsp) / 1000;
20: (1f) r0 -= r1
; delta_us = (bpf_ktime_get_ns() - *tsp) / 1000;
21: (37) r0 /= 1000
;
22: (77) r7 >>= 32
; int tcp_newstate = args->newstate;
23: (61) r8 = *(u32 *)(r6 +20)
; if (args->family == AF_INET) {
24: (69) r1 = *(u16 *)(r6 +28)
; if (args->family == AF_INET) {
25: (55) if r1 != 0x2 goto pc+56
 R0=inv(id=0) R1=inv2 R6=ctx(id=0,off=0,imm=0) R7=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R8=inv(id=0,umax_value=4294967295,var_off=(0x0; 0xffffffff)) R9=inv(id=0,umax_value=65535,var_off=(0x0; 0xffff)) R10=fp0 fp-8=mmmmmmmm fp-112=inv
; struct ipv4_data_t data4 = {
26: (7b) *(u64 *)(r10 -80) = r0
; .uid = bpf_get_current_uid_gid() & 0xFFFFFFFF };
27: (85) call bpf_get_current_uid_gid#15
; struct ipv4_data_t data4 = {
28: (63) *(u32 *)(r10 -68) = r0
; .oldstate = args->oldstate,
29: (61) r1 = *(u32 *)(r6 +20)
30: (61) r2 = *(u32 *)(r6 +16)
31: (b7) r3 = 0
; struct ipv4_data_t data4 = {
32: (63) *(u32 *)(r10 -40) = r3
last_idx 32 first_idx 25
regs=8 stack=0 before 31: (b7) r3 = 0
33: (63) *(u32 *)(r10 -44) = r3
34: (63) *(u32 *)(r10 -48) = r3
35: (63) *(u32 *)(r10 -52) = r3
36: (63) *(u32 *)(r10 -60) = r2
37: (63) *(u32 *)(r10 -56) = r1
; data4.skaddr = (u64)args->skaddr;
38: (79) r1 = *(u64 *)(r6 +8)
; data4.skaddr = (u64)args->skaddr;
39: (7b) *(u64 *)(r10 -96) = r1
; data4.ts_us = bpf_ktime_get_ns() / 1000;
40: (85) call bpf_ktime_get_ns#5
; data4.ts_us = bpf_ktime_get_ns() / 1000;
41: (37) r0 /= 1000
; data4.ts_us = bpf_ktime_get_ns() / 1000;
42: (7b) *(u64 *)(r10 -104) = r0
; __builtin_memcpy(&data4.saddr, args->saddr, sizeof(data4.saddr));
43: (71) r1 = *(u8 *)(r6 +32)
44: (67) r1 <<= 8
45: (71) r2 = *(u8 *)(r6 +31)
46: (4f) r1 |= r2
47: (71) r2 = *(u8 *)(r6 +33)
48: (67) r2 <<= 16
49: (71) r3 = *(u8 *)(r6 +34)
50: (67) r3 <<= 24
51: (4f) r3 |= r2
52: (4f) r3 |= r1
53: (71) r1 = *(u8 *)(r6 +38)
54: (71) r2 = *(u8 *)(r6 +37)
55: (71) r4 = *(u8 *)(r6 +35)
56: (71) r5 = *(u8 *)(r6 +36)
; data4.dport = dport;
57: (79) r0 = *(u64 *)(r10 -112)
58: (6b) *(u16 *)(r10 -62) = r0
; data4.lport = lport;
59: (6b) *(u16 *)(r10 -64) = r9
; data4.pid = pid;
60: (63) *(u32 *)(r10 -72) = r7
; __builtin_memcpy(&data4.saddr, args->saddr, sizeof(data4.saddr));
61: (63) *(u32 *)(r10 -88) = r3
62: (67) r5 <<= 8
63: (4f) r5 |= r4
64: (67) r2 <<= 16
65: (67) r1 <<= 24
66: (4f) r1 |= r2
67: (4f) r1 |= r5
68: (63) *(u32 *)(r10 -84) = r1
; struct ipv4_data_t data4 = {
69: (bf) r1 = r10
70: (07) r1 += -52
; bpf_get_current_comm(&data4.task, sizeof(data4.task));
71: (b7) r2 = 16
72: (85) call bpf_get_current_comm#16
last_idx 72 first_idx 41
regs=4 stack=0 before 71: (b7) r2 = 16
; bpf_perf_event_output(args, (void *)bpf_pseudo_fd(1, -2), CUR_CPU_IDENTIFIER, &data4, sizeof(data4));
73: (18) r2 = 0xffff9ceceec5b200
75: (bf) r4 = r10
;
76: (07) r4 += -104
; bpf_perf_event_output(args, (void *)bpf_pseudo_fd(1, -2), CUR_CPU_IDENTIFIER, &data4, sizeof(data4));
77: (bf) r1 = r6
78: (18) r3 = 0xffffffff
80: (b7) r5 = 72
81: (05) goto pc+128
;
210: (85) call bpf_perf_event_output#25
invalid indirect read from stack R4 off -104+68 size 72
processed 80 insns (limit 1000000) max_states_per_insn 0 total_states 4 peak_states 4 mark_read 4

Traceback (most recent call last):
  File "./tcpstateuser.py", line 426, in <module>
    b = BPF(text=bpf_text)
  File "/usr/lib/python3.6/site-packages/bcc/__init__.py", line 484, in __init__
    self._trace_autoload()
  File "/usr/lib/python3.6/site-packages/bcc/__init__.py", line 1462, in _trace_autoload
    fn = self.load_func(func_name, BPF.TRACEPOINT)
  File "/usr/lib/python3.6/site-packages/bcc/__init__.py", line 524, in load_func
    (func_name, errstr))
Exception: Failed to load BPF program b'tracepoint__sock__inet_sock_set_state': Permission denied
